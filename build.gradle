buildscript {
    repositories {
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven {
            // 阿里云镜像，方便国内开发
            url = uri("https://maven.aliyun.com/repository/public/")
        }
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

apply plugin: 'eclipse'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'java'
apply plugin: 'maven-publish'

version = "${minecraft_version}-forge-${mod_version}"
group = 'mod.tropidragon' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_name

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2022.11.06-1.18.2'
    // 使用 access transformer 来修改原版的一些方法访问修饰符
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // mappings channel: 'official', version: '1.18.2'
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.


    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
            // Export mixin-changed classes
            // property 'mixin.debug.export', 'true'


            // These arguments allow for optional authentication with Mojang servers.
            // If you want to authenticate, put these properties in GRADLE_HOME/gradle.properties.
            // By default, this is C:\Users\<your username>\.gradle\gradle.properties on Windows or ~/.gradle/gradle.properties on Linux/MacOS.
            // if (project.hasProperty('mc_uuid')) {
            //     // Your UUID, trimmed / without the dashes
            //     args '--uuid', project.getProperty('mc_uuid')
            // }
            // if (project.hasProperty('mc_username')) {
            //     // Your Minecraft in-game username, not email
            //     args '--username', project.getProperty('mc_username')
            // }
            // if (project.hasProperty('mc_accessToken')) {
            //     // Your current access token. When it expires, you need to retrieve a new one and regenerate your run configurations.
            //     // You may be able to find it in your .minecraft folder in launcher_accounts.json or launcher_profiles.json.
            //     args '--accessToken', project.getProperty('mc_accessToken')
            // }

            // Add mixin config to runtime
            // args '-mixin.config=' + project.getProperty('mod_id') + '.mixins.json'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'huntersfriend'

            mods {
                huntersfriend {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'huntersfriend'

            mods {
                huntersfriend {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'huntersfriend', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                huntersfriend {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you
    maven {
        // 阿里云镜像，方便国内开发
        url = uri("https://maven.aliyun.com/repository/public/")
        content {
            includeGroup 'org.apache.commons'
        }
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        // Patchouli
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "Mod Maven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url "https://maven.shedaniel.me/" } // cloth config api
    maven { url "https://dvs1.progwml6.com/files/maven/" }
    maven { url "https://modmaven.dev" }
    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
    maven {
        url 'https://jitpack.io'
    }
    maven {
        name "KosmX's maven"
        url 'https://maven.kosmx.dev/'
    }
    mavenCentral() // MixinExtras is there
    mavenLocal()
    flatDir {
        dir 'libs'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:${forge_version}'
    
    compileOnly fg.deobf("mezz.jei:jei-1.18.2:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.18.2:${jei_version}")

    // Cloth Config
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_forge}")

    // MixinExtras
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.6"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.6")) {
        jarJar.ranged(it, "[0.3.6,)")
    }

    // TH Maid
    implementation fg.deobf("curse.maven:touhou-little-maid-355044:6302607") // 1.2.1


    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"

    // Enables exporting mixin-changed classes to .mixin.out in the run folder
    debug.verbose = true
    debug.export = true
}

// def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta', "${mod_id}.mixins.json".toString()]
// def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
// def replaceProperties = [mod_id: mod_id, mod_name: mod_name, mod_version: mod_version,
//         mod_authors: mod_authors, mod_description: mod_description,
//         minecraft_version_range: minecraft_version_range, forge_version_range: forge_version_range,
//         loader_version_range: loader_version_range]


// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
        ])
    }
}


java {
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
